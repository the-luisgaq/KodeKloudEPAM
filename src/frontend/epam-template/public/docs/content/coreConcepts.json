[
  {
    "data": {},
    "type": "uui-richTextEditor-header-2",
    "children": [
      {
        "text": "Packages"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "UUI is split into separate packages to support the pay-for-what-you-use approach."
      }
    ]
  },
  {
    "data": {},
    "type": "unordered-list",
    "children": [
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/uui-core",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — core interfaces,  services, helpers, basic types"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/uui-components",
                "uui-richTextEditor-code": true
              },
              {
                "text": "— core of UUI components. They represent a set of essential non-styled components with business logic and global CSS classes. Generally, you don't need to use components from this package if the same component exists in a skin-specific package or package of themable components"
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/uui",
                "uui-richTextEditor-code": true
              },
              {
                "text": "— a set of themable components that can be used with both the default set of themes and custom themes"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/loveship",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — skin under UUI with Loveship theme"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/promo",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — skin under UUI with Promo theme"
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/electric",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — skin under UUI with Electric theme"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/assets",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — icons set, fonts, scss/less global variables, and common mixins"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/uui-editor",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — Rich Text Editor based on SlateJS"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/draft-rte",
                "uui-richTextEditor-code": true
              },
              {
                "text": " —  Rich Text Editor based on DraftJS (deprecated)"
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {
              "checked": false
            },
            "type": "list-item-child",
            "children": [
              {
                "text": "@epam/uui-timeline",
                "uui-richTextEditor-code": true
              },
              {
                "text": " — set of components to build interactive timelines"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "data": {
      "checked": false
    },
    "type": "note-warning",
    "children": [
      {
        "text": "Note:",
        "uui-richTextEditor-bold": true,
        "color": "#FF4E33",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": " Please use all UUI packages with "
      },
      {
        "text": "the same version",
        "uui-richTextEditor-underlined": true
      },
      {
        "text": " to prevent the installation of unused packages."
      },
      {
        "text": "\n",
        "uui-richTextEditor-bold": true
      },
      {
        "text": "For example, if you use @epam/loveship: 4.0.0 version, all other UUI packages should be also 4.0.0 version."
      }
    ]
  },
  {
    "data": {},
    "type": "uui-richTextEditor-header-2",
    "children": [
      {
        "text": "Interfaces"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "Component's API are usually composed from many interfaces, which are re-used across many other components. For example, every component that can be clicked would get the same "
      },
      {
        "text": "IClickable",
        "uui-richTextEditor-code": true
      },
      {
        "text": " interface."
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "This is done to:"
      }
    ]
  },
  {
    "data": {},
    "type": "unordered-list",
    "children": [
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "Let developers learn less. Similarly, behaving components have similar APIs."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "Enforce API consistency."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "Composability. If a component needs another component to plug into, it can request it with something like \"I need something IClickable.\" "
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "The most notable props-related interfaces are:"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "data": {},
        "type": "paragraph",
        "children": [
          {
            "text": "IHasCX",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": " { ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "cx",
            "color": "#001080",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "?: ",
            "uui-richTextEditor-span-mark": true,
            "color": "#000000"
          },
          {
            "text": "CX",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": " } ",
            "uui-richTextEditor-span-mark": true,
            "color": "#000000"
          },
          {
            "text": "— "
          },
          {
            "text": "\"",
            "uui-richTextEditor-span-mark": true,
            "color": "#000000"
          },
          {
            "text": "CX\" means \"Classes\" here. It's a short-cut to the "
          },
          {
            "data": {
              "url": "https://github.com/JedWatson/classnames"
            },
            "type": "link",
            "url": "https://github.com/JedWatson/classnames",
            "children": [
              {
                "text": "classnames "
              }
            ]
          },
          {
            "text": "library. Most components implement this interface. This allows to put CSS classes to a component. CX can be an object or array, and all its non-falsy values would be put classes on the root of the component. Example: <Button cx={[ 'red', isActive && 'big ]} />"
          }
        ]
      },
      {
        "data": {},
        "type": "paragraph",
        "children": [
          {
            "text": "IEditable",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "<",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "T",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "> ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "{ ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "value",
            "color": "#001080",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": ": ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "T",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "; ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "onValueChange",
            "color": "#795e26",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "(",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "newValue",
            "color": "#001080",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": ": ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "T",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "): ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "void",
            "color": "#267f99",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "; ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "} ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "—"
          },
          {
            "text": " ",
            "color": "#000000",
            "uui-richTextEditor-span-mark": true
          },
          {
            "text": "used for components, which allows user to change some value inside it. TextInput is a basic example. In other words, that's how we make all components "
          },
          {
            "data": {
              "url": "https://reactjs.org/docs/forms.html#controlled-components"
            },
            "type": "link",
            "url": "https://reactjs.org/docs/forms.html#controlled-components",
            "children": [
              {
                "text": "controlled"
              }
            ]
          },
          {
            "text": "."
          }
        ]
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "ICanRedirect",
        "color": "#267f99",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": " { ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "link",
        "color": "#001080",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "?: ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "Link",
        "color": "#267f99",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "; ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "href",
        "color": "#001080",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "?: ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "string",
        "color": "#267f99",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "; ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "isLinkActive",
        "color": "#001080",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "?: ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "boolean",
        "color": "#267f99",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "; ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "target",
        "color": "#001080",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "?: ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "'_blank'",
        "color": "#a31515",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "; ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "} ",
        "color": "#000000",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "— used for controls, which can perform a redirect. SPA links are tricky - you can click them and get a virtual redirect, or you can click them with the right mouse button and pick 'Open in a new window.' Links can be 'visited' or not. Components with this interface handle such cases."
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "This is just a few examples of our core interfaces, which will help you to understand our approach which helps us to build consistent APIs. We use much more interfaces for different cases, just jump into any component typo to see them."
      }
    ]
  },
  {
    "data": {},
    "type": "uui-richTextEditor-header-2",
    "children": [
      {
        "text": "Customization"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "Components are customizable in many ways:"
      }
    ]
  },
  {
    "type": "unordered-list",
    "children": [
      {
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "we provide a standard set of CSS Custom Properties (ara Tokens or CSS variables), to change components' appearance. You can change them at root node to set the whole Theme, or change them for a particular component to change its look"
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "there are many 'render props' - a props which looks like "
              },
              {
                "text": "renderSomething",
                "uui-richTextEditor-code": true
              },
              {
                "text": ".  With them, you can render parts of components yourself. In these cases, we provide default implementations, so you can just tweak our component's properties, or wrap it for your needs."
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "every component provides the "
              },
              {
                "text": "cx",
                "uui-richTextEditor-code": true
              },
              {
                "text": " prop, allowing you to put your CSS classes on it. We also put a nandy set of CSS selectors, so you can build your CSS on top."
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "most inputs provides the "
              },
              {
                "text": "rawProps",
                "uui-richTextEditor-code": true
              },
              {
                "text": " prop, which are passed-thru the underlying input. You can use it to pass certain DOM properties directly."
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "complex components' parts are exposed, to simplify compose your own components if standard ones doesn't suffice. For example, the DataTable, is a relatively simple component for DataTableHeader, and DataTableRow. You can use these components directly to mix-in data table into your layout."
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "We try to keep our features set manageable, and we are trying to find UX to fit all. To do this, we care a lot of extensibility, as it allow us to focus more on turn-key solution-like approach, while letting users to tweak our components for their needs."
      }
    ]
  },
  {
    "data": {},
    "type": "uui-richTextEditor-header-2",
    "children": [
      {
        "text": "Services"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "UUI has various services which help your app handle routine tasks. They are implemented as singleton classes accessible via React Contexts."
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "We usually make them available as a global module in our apps (see our application "
      },
      {
        "data": {
          "url": "https://github.com/epam/UUI/blob/main/templates/uui-cra-template/template/src/index.tsx#L19"
        },
        "type": "link",
        "url": "https://github.com/epam/UUI/blob/main/templates/uui-cra-template/template/src/index.tsx#L19",
        "children": [
          {
            "text": "template"
          }
        ]
      },
      {
        "text": "). So you can access a service in your app with the following:"
      }
    ]
  },
  {
    "data": {},
    "type": "note-quote",
    "children": [
      {
        "text": "import { svc } from '../../services';\n...\nsvc.uuiModals.showModal(...)"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "We require apps to "
      },
      {
        "data": {
          "url": "https://uui.epam.com/documents?category=contexts&id=contextProvider&mode=doc&skin=UUI4_promo"
        },
        "type": "link",
        "url": "https://uui.epam.com/documents?category=contexts&id=contextProvider&mode=doc&skin=UUI4_promo",
        "children": [
          {
            "text": "initialize"
          }
        ]
      },
      {
        "text": " all services and bring them to React Context with the ContextProvider component. It's necessary to be one of the app’s root components - usually initialised in the index.ts file."
      }
    ]
  },
  {
    "data": {},
    "type": "list-item-child",
    "children": [
      {
        "text": "The following contexts/services exist in UUI:"
      }
    ]
  },
  {
    "data": {},
    "type": "unordered-list",
    "children": [
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": ""
              },
              {
                "data": {
                  "url": "https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts"
                },
                "type": "link",
                "url": "https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts",
                "children": [
                  {
                    "text": "AnalyticsContext"
                  }
                ]
              },
              {
                "text": " / svc.uuiAnalytics — Web Analytics abstraction. "
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": ""
              },
              {
                "data": {
                  "url": "https://uui.epam.com/documents?id=apiContext&mode=doc&skin=UUI4_promo&category=contexts"
                },
                "type": "link",
                "url": "https://uui.epam.com/documents?id=apiContext&mode=doc&skin=UUI4_promo&category=contexts",
                "children": [
                  {
                    "text": "ApiContext"
                  }
                ]
              },
              {
                "text": " / svc.uuiApi — makes API calls gently, handling common HTTP errors, can re-login user if session is lost w/o losing his work."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "DndContext / svc.uuiDnd — handles Drag-n-drop operations. See "
              },
              {
                "data": {
                  "url": "/demo?id=dnd"
                },
                "type": "link",
                "url": "/demo?id=dnd",
                "children": [
                  {
                    "text": "demo"
                  }
                ]
              },
              {
                "text": "."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": ""
              },
              {
                "data": {
                  "url": "https://uui.epam.com/documents?id=apiContext&mode=doc&skin=UUI4_promo&category=contexts"
                },
                "type": "link",
                "url": "https://uui.epam.com/documents?id=apiContext&mode=doc&skin=UUI4_promo&category=contexts",
                "children": [
                  {
                    "text": "ErrorContext"
                  }
                ]
              },
              {
                "text": " / svc.uuiError — handles JS crashes with splash screen errors. ApiContext uses it to show HTTP errors."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "LayoutContext / svc.uuiLayout — tracks z-indexes for overlays, like modals and dropdowns."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": ""
              },
              {
                "data": {
                  "url": "https://uui.epam.com/documents?id=lockContextDoc&mode=doc&skin=UUI4_promo&category=contexts"
                },
                "type": "link",
                "url": "https://uui.epam.com/documents?id=lockContextDoc&mode=doc&skin=UUI4_promo&category=contexts",
                "children": [
                  {
                    "text": "LockContext"
                  }
                ]
              },
              {
                "text": " / svc.uuiLocks — allows you to 'lock' a user into a specific state, usually used to keep the user from losing unsaved data."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": ""
              },
              {
                "data": {
                  "url": "https://uui.epam.com/documents?id=modalContext&mode=doc&skin=UUI4_promo&category=contexts"
                },
                "type": "link",
                "url": "https://uui.epam.com/documents?id=modalContext&mode=doc&skin=UUI4_promo&category=contexts",
                "children": [
                  {
                    "text": "ModalContext"
                  }
                ]
              },
              {
                "text": " / svc.uuiModals —  handles showing modal dialogs out of the primary rendering tree and stacking them correctly."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": ""
              },
              {
                "data": {
                  "url": "https://uui.epam.com/documents?id=notificationContextDoc&mode=doc&skin=UUI4_promo&category=contexts"
                },
                "type": "link",
                "url": "https://uui.epam.com/documents?id=notificationContextDoc&mode=doc&skin=UUI4_promo&category=contexts",
                "children": [
                  {
                    "text": "NotificationContext"
                  }
                ]
              },
              {
                "text": " / svc.uuiNotifications — allows showing temporary floating messages."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "UserSettingsContext / svc.uuiUserSettings — an abstraction layer to save temporary user settings, like visible columns in a table. Defaults to Local Storage, but the application can change this."
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "data": {},
    "type": "uui-richTextEditor-header-2",
    "children": [
      {
        "text": "State management"
      }
    ]
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "UUI contains several tools to cover common state management and data manipulation patterns. They include: "
      }
    ]
  },
  {
    "data": {},
    "type": "unordered-list",
    "children": [
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "DataSources subsystem - an abstraction to stream data into list/tree components, like Pickers and DataTable. "
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "Forms and Lenses - a set of helpers to streamline the development of Forms and other interfaces with the load-edit-save flow."
              }
            ]
          }
        ]
      }
    ]
  }
]
